# -*- coding: utf-8 -*-
"""Lambda Data Science Assignment 4 - Inferential Statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-Oy2Rzod1o6EX167LAaaE7ITg_HEbQS

# Lambda School, Intro to Data Science, Day 4

## Inferential Statistics Assignment
"""

# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import random
from statistics import mean, stdev

"""# Titanic

Use the [`describe` function in pandas](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html) to calculate summary statistics (including mean and standard deviation) for `age` and `fare`.

Think, and be ready to discuss: How do these two features compare in their central tendency and in their spread?
"""

df = pd.read_csv('https://raw.githubusercontent.com/ryanleeallred/datasets/master/titanic.csv', index_col=0)
features = ['age', 'fare']
##df.dropna(subset=features, inplace=True)
df.describe()

df['age'].isnull().sum()

#checking if age and fare columns have any null values

print(sum(pd.isnull(df.age)))
print(sum(pd.isnull(df.fare)))

#fill empty age rows with the forward value age
df['age'] = df['age'].fillna(method='ffill')

#checking if null values have been filled
print(sum(pd.isnull(df.age)))

fig, ax = plt.subplots(1,2)
ax[0].hist(df.fare)
ax[1].hist(df.age)

"""Plot histograms for both features.

Think, and be ready to discuss: What do you notice about the shape of these distributions?
"""

#the age graph sort of resembles a bell curve, while the fare graph is denser in the beginning and the density decreases and the fare increases

"""# Clumsy Carl

Re-do the Clumsy Carl problem -- but suppose that Carl broke **2** of 5 dishes. What's the p-value?

Think, and be ready to discuss: Would you reject the null hypothesis?

---

Here's the problem restated:

Imagine a restaurant employs five dishwashers:
- Alice
- Bob
- Carl
- Dave
- Eric

One week, they break five dishes -- and Carl breaks **two** of the five. So, his coworkers have a hypothesis: Carl is clumsy!

Carl says no, it was just bad luck and random chance: it could have happened to anybody. We can call this the null hypothesis.

Can we do some math to help answer this argument? What's the probability it was just bad luck?

We can write a Monte Carlo simulation to estimate the probability that Carl breaks at least four of the five dishes, assuming that breaking a dish is a truly random event. (We'll assume that the dishwashers have identical workloads and skills.)
"""

import random
from statistics import mean, stdev
dishwashers = ['Alice', 'Bob', 'Carl', 'Dave', 'Eric']
def break_dishes():
  broken = [random.choice(dishwashers) for _ in range(5)]
  return broken.count('Carl')

monte_carlo=[break_dishes() for _ in range (100000)]

#mean of broken dishes
the_mean, std_dev = mean(monte_carlo), stdev(monte_carlo)

#odds of breaking atleast 2 dishes
odds_of_two = (sum(break_dishes() >= 2 for _ in monte_carlo)/100000)
p_value_two = mean(break_dishes() >=2 for _ in monte_carlo)
if p_value_two < .05:
  print('We reject the null hypothsis that this was just bad luck, It is likely that Carl is clumsy, the p_value of him breaking atleast 2 dishes is', p_value_two)
else:
  print('We accept the null hypothsis, in all likelihood Carl is not clumsy, he was just unlucky, the p_value of him breaking atleast 2 dishes is', p_value_two)

print(odds_of_two)

"""# Two dice
Simulate the distribution of adding two dice.

What is the mean? Standard deviation?
"""

import random
import numpy as np
def die_rolls():
  sides = list(range(1,7))
  die = [random.choice(sides) for _ in range (2)]
  return die

monte_carlo_two = [sum(die_rolls()) for _ in range(100000)]
calculation = {'mean': np.mean(monte_carlo_two), 'standard deviation': np.std(monte_carlo_two)}
std_dev = np.std(monte_carlo_two)
print('Mean is: ', calculation['mean'], 'Standard Deviation is: ', calculation['standard deviation'])

"""What is the standard score (z score) of rolling a 10?"""

z_score = ((10 - calculation['mean'])/calculation['standard deviation'])
z_score

"""What is the probability of rolling a 10 or higher?"""

probability = (sum(x >= 10 for x in monte_carlo_two)/100000) 
print('The probability of rolling a 10 or higher {}%'.format(probability))

"""# Harvest

Using bootstrap resampling, calculate the 95% confidence interval for mean apple weight ...
"""

def bootstrap_sample(items):
    # Random resample *with replacement*
    return random.choices(items, k=len(items))

def percentile(x, p):
    # x: List of numbers
    # p: Percentile, between 0 and 100
    i = round(len(x) * p/100)
    return sorted(x)[i]

apples = [.5, .4, .5, .6, .3, .7]
mean_apples = [mean(bootstrap_sample(apples)) for _ in range(100000)]
percentile(mean_apples,5), percentile(mean_apples,95)

"""... and for mean pumpkin weight:"""

pumpkins = [1, 1, 1, 3, 3, 591]
mean_pumpkins = [mean(bootstrap_sample(pumpkins)) for _ in range(100000)]
percentile(mean_pumpkins,5),percentile(mean_pumpkins,95)
