# -*- coding: utf-8 -*-
"""Copy of LSDS Intro Assignment 8 - Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-hJSrxfVXhQzkTA0-J4Y95c7Acw4awtV

# Lambda School, Intro to Data Science, Day 8 — Classification!

## Assignment

Run this cell to load the Titanic data:
"""

import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
train, test = train_test_split(sns.load_dataset('titanic').drop(columns=['alive']), random_state=0)
target = 'survived'

#check for null values in training and testing data
print("Training sex null:", train['sex'].isnull().sum())
print("Training age null:", train['age'].isnull().sum())
print("Testing sex null:", test['sex'].isnull().sum())
print("Testing age null:", test['age'].isnull().sum())

#remove null values and replace with median
train.age.fillna(train.age.median(), inplace= True)
test.age.fillna(test.age.median(), inplace= True)

#check if null corrected
train['age'].isnull().sum()

#change female to boolean /integer
train['female'] = train.sex == 'female'
test['female'] = test.sex == 'female'

#define features
features = ['female', 'age']

#create accuracy score
predictions = [0] * len(train)
from sklearn.metrics import accuracy_score
accuracy_score(train.survived, predictions)

"""Then, train a [Logistic Regression](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression.predict_proba), [Decision Tree](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html), or [Random Forest](http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html) model. Use any features and parameters you want. 

Try to get better than 78.0% accuracy on the test set! (This is not required, but encouraged.)

Do refer to the lecture notebook — but try not to copy-paste.

> You must type each of these exercises in, manually. If you copy and paste, you might as well not even do them. The point of these exercises is to train your hands, your brain, and your mind in how to read, write, and see code. If you copy-paste, you are cheating yourself out of the effectiveness of the lessons. —*[Learn Python the Hard Way](https://learnpythonthehardway.org/book/intro.html)*

After this, you may want to try [Kaggle's Titanic challenge](https://www.kaggle.com/c/titanic)!
"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier (max_depth=4)
model.fit(train[features], train[target])

#training accuracy
true_val = train[target]
predict_val = model.predict(train[features])
print('Training accuracy is:', accuracy_score(true_val, predict_val))

#testing accuracy
true_val2 = test[target]
predict_val2 = model.predict(test[features])
print('Testing accuracy is:', accuracy_score(true_val2, predict_val2))
